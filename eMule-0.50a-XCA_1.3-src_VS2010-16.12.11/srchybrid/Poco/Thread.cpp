//
// Thread.cpp
//
// $Id: //poco/1.3/Foundation/src/Thread.cpp#4 $
//
// Library: Foundation
// Package: Threading
// Module:  Thread
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "stdafx.h"
#include "Poco/Thread.h"
#include "Poco/Mutex.h"
//#include "Poco/ThreadLocal.h"
//#include <sstream>
#include <process.h>


#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

namespace Poco {


//Thread::CurrentThreadHolder Thread::_currentThreadHolder;


Thread::Thread(bool deleteOnExit, Priority prio): 
	_thread(0),
	//_threadId(0),
	_prio(prio),
	_deleteOnExit(deleteOnExit)/*,
	_stackSize(0),
	_id(uniqueId()), 
	_name(makeName()), 
	_pTLS(0)*/
{
}

/*
Thread::Thread(const std::string& name): 
	_thread(0),
	_threadId(0),
	_prio(PRIO_NORMAL),
	_stackSize(0),
	_id(uniqueId()), 
	_name(name), 
	_pTLS(0)
{
}
*/

Thread::~Thread()
{
	//delete _pTLS;
	if (_thread) CloseHandle(_thread);
}


void Thread::setPriority(Priority prio)
{
	if (prio != _prio)
	{
		_prio = prio;
		if (_thread)
		{
			if (SetThreadPriority(_thread, _prio) == 0)
				ATLTRACE("Poco::Thread - cannot set thread priority");
		}
	}
}


bool Thread::start()
{
	if (isRunning())
	{
		ATLTRACE("Poco::Thread - thread already running");
		return true;
	}

#if defined(_DLL)
	DWORD _threadId;
	_thread = CreateThread(NULL, 0/*_stackSize*/, runnableEntry, this, 0, &_threadId);
#else
	unsigned threadId;
	_thread = (HANDLE) _beginthreadex(NULL, 0/*_stackSize*/, runnableEntry, this, 0, &threadId);
	//_threadId = static_cast<DWORD>(threadId);
#endif
	if (!_thread)
	{
		ATLTRACE("Poco::Thread - cannot create thread");
		if(_deleteOnExit)
			delete this;
		return false;
	}
	if (_prio != PRIO_NORMAL && !SetThreadPriority(_thread, _prio))
		ATLTRACE("Poco::Thread - cannot set thread priority");
	return true;
}


void Thread::join()
{
	if (!_thread) return;

	switch (WaitForSingleObject(_thread, INFINITE))
	{
	case WAIT_OBJECT_0:
		threadCleanup();
		return;
	default:
		ATLTRACE("Poco::Thread - cannot join thread");
	}
}


bool Thread::join(long milliseconds)
{
	if (!_thread) return true;

	switch (WaitForSingleObject(_thread, milliseconds + 1))
	{
	case WAIT_OBJECT_0:
		threadCleanup();
		return true;
	default:
		ATLTRACE("Poco::Thread - cannot join thread");
	case WAIT_TIMEOUT:
		return false;
	}
}


bool Thread::isRunning() const
{
	if (_thread)
	{
		DWORD ec = 0;
		return GetExitCodeThread(_thread, &ec) && ec == STILL_ACTIVE;
	}
	return false;
}


void Thread::threadCleanup()
{
	if (!_thread) return;
	if (CloseHandle(_thread)) _thread = 0;
}

/*
Thread* Thread::current()
{
	return _currentThreadHolder.get();
}
*/

Thread::TID Thread::currentTid()
{
    return GetCurrentThreadId();
}


#if defined(_DLL)
DWORD WINAPI runnableEntry(LPVOID pThread)
#else
unsigned __stdcall runnableEntry(void* pThread)
#endif
{
	//_currentThreadHolder.set(reinterpret_cast<Thread*>(pThread));
	Thread* _pThread = reinterpret_cast<Thread*>(pThread);
	try
	{
		_pThread->run();
	}
	catch (...)
	{
		ATLASSERT(0);
	}
	if(_pThread->_deleteOnExit)
		delete _pThread;
	return 0;
}


bool Thread::terminate()
{
	ATLASSERT(_thread);
#if defined(_DLL)
	if(!TerminateThread(_thread, (DWORD)-1))
	{
		ATLTRACE("Poco::Thread - cannot terminate thread");
		_thread = 0;
		return false;
	}
#else
	_endthreadex(0);
#endif
	_thread = 0;
	return true;
}

/*
ThreadLocalStorage& Thread::tls()
{
	if (!_pTLS)
		_pTLS = new ThreadLocalStorage;
	return *_pTLS;
}


void Thread::clearTLS()
{
	if (_pTLS)
	{
		delete _pTLS;
		_pTLS = 0;
	}
}


std::string Thread::makeName()
{
	std::ostringstream name;
	name << '#' << _id;
	return name.str();
}


int Thread::uniqueId()
{
	static FastMutex mtx;
	FastMutex::ScopedLock lock(mtx);

	static unsigned count = 0;
	++count;
	return count;
}


void Thread::setName(const std::string& name)
{
	FastMutex::ScopedLock lock(_mutex);

	_name = name;
}
*/

} // namespace Poco
