//
// Thread.h
//
// $Id: //poco/1.3/Foundation/include/Poco/Thread.h#6 $
//
// Library: Foundation
// Package: Threading
// Module:  Thread
//
// Definition of the Thread class.
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Foundation_Thread_INCLUDED
#define Foundation_Thread_INCLUDED


#include "Poco/Thread.h"


namespace Poco {

class Thread
	/// This class implements a platform-independent
	/// wrapper to an operating system thread.
	///
	/// Every Thread object gets a unique (within
	/// its process) numeric thread ID.
	/// Furthermore, a thread can be assigned a name.
	/// The name of a thread can be changed at any time.
{
public:	
    typedef DWORD TID;
	enum Priority
		/// Thread priorities.
	{
		PRIO_LOWEST  = THREAD_PRIORITY_LOWEST,
		PRIO_LOW     = THREAD_PRIORITY_BELOW_NORMAL,
		PRIO_NORMAL  = THREAD_PRIORITY_NORMAL,
		PRIO_HIGH    = THREAD_PRIORITY_ABOVE_NORMAL,
		PRIO_HIGHEST = THREAD_PRIORITY_HIGHEST
	};

	Thread(bool deleteOnExit = false, Priority prio = PRIO_NORMAL);
		/// Creates a thread. Call start() to start it.
		
	//Thread(const std::string& name);
		/// Creates a named thread. Call start() to start it.
		
	virtual ~Thread();
		/// Destroys the thread.

	//int id() const;
		/// Returns the unique thread ID of the thread.

	TID tid() const;
		/// Returns the native thread ID of the thread.
/*
	std::string name() const;
		/// Returns the name of the thread.

	std::string getName() const;
		/// Returns teh name of the thread.

	void setName(const std::string& name);
		/// Sets the name of the thread.
*/
	void setPriority(Priority prio);
		/// Sets the thread's priority.
		///
		/// Some platform only allow changing a thread's priority
		/// if the process has certain privileges.

	Priority getPriority() const;
		/// Returns the thread's priority.

	void setOSPriority(int prio);
		/// Sets the thread's priority, using an operating system specific
		/// priority value. Use getMinOSPriority() and getMaxOSPriority() to
		/// obtain mininum and maximum priority values.
		
	int getOSPriority() const;
		/// Returns the thread's priority, expressed as an operating system
		/// specific priority value.

	//void setStackSize(int size);
		/// Sets the thread's stack size in bytes.
		/// Setting the stack size to 0 will use the default stack size.
		/// Typically, the real stack size is rounded up to the nearest
		/// page size multiple.

	//int getStackSize() const;
		/// Returns the thread's stack size in bytes.
		/// If the default stack size is used, 0 is returned.

	bool start();
		/// Starts the thread with the given target.

	//void start(Callable target, void* pData = 0);
		/// Starts the thread with the given target and parameter.

	void join();
		/// Waits until the thread completes execution.	
		/// If multiple threads try to join the same
		/// thread, the result is undefined.
		
	bool join(long milliseconds);
		/// Waits for at most the given interval for the thread
		/// to complete. Returns true if the thread has finished,
		/// false otherwise.

	bool isRunning() const;
		/// Returns true if the thread is running.

	virtual void run() = 0;
		/// Do whatever the thread needs to do. Must
		/// be overridden by subclasses.

	static void sleep(long milliseconds);
		/// Suspends the current thread for the specified
		/// amount of time.

	static void yield();
		/// Yields cpu to other threads.

	static Thread* current();
		/// Returns the Thread object for the currently active thread.
		/// If the current thread is the main thread, 0 is returned.

 	static TID currentTid();
 		/// Returns the native thread ID for the current thread.    

	bool terminate();

protected:
#if defined(_DLL)
	static friend DWORD WINAPI runnableEntry(LPVOID pThread);
#else
	static friend unsigned __stdcall runnableEntry(void* pThread);
#endif

	void threadCleanup();
/*
	ThreadLocalStorage& tls();
		/// Returns a reference to the thread's local storage.

	void clearTLS();
		/// Clears the thread's local storage.

	std::string makeName();
		/// Creates a unique name for a thread.
		
	static int uniqueId();
		/// Creates and returns a unique id for a thread.
		*/
private:
	/*class CurrentThreadHolder
	{
	public:
		CurrentThreadHolder(): _slot(TlsAlloc())
		{
			if (_slot == TLS_OUT_OF_INDEXES)
				throw SystemException("cannot allocate thread context key");
		}
		~CurrentThreadHolder()
		{
			TlsFree(_slot);
		}
		Thread* get() const
		{
			return reinterpret_cast<Thread*>(TlsGetValue(_slot));
		}
		void set(Thread* pThread)
		{
			TlsSetValue(_slot, pThread);
		}
	
	private:
		DWORD _slot;
	};*/

	Thread(const Thread&);
	Thread& operator = (const Thread&);
	//CallbackData _callbackTarget;
	HANDLE       _thread;
	//DWORD        _threadId;
	Priority     _prio;
	//int          _stackSize;

	//static CurrentThreadHolder _currentThreadHolder;

	/*int                 _id;
	std::string         _name;
	ThreadLocalStorage* _pTLS;
	mutable FastMutex   _mutex;

	friend class ThreadLocalStorage;
	friend class PooledThread;*/
protected:
	bool         _deleteOnExit;
};

/*
//
// inlines
//
inline Thread::TID Thread::tid() const
{
	return _threadId;
}


inline int Thread::id() const
{
	return _id;
}


inline std::string Thread::name() const
{
	FastMutex::ScopedLock lock(_mutex);
	
	return _name;
}


inline std::string Thread::getName() const
{
	FastMutex::ScopedLock lock(_mutex);
	
	return _name;
}
*/

inline Thread::Priority Thread::getPriority() const
{
	return _prio;
}


inline int Thread::getOSPriority() const
{
	return _prio;
}


/*
inline void Thread::setStackSize(int size)
{
	_stackSize = size;
}


inline int Thread::getStackSize() const
{
	return _stackSize;
}
*/


} // namespace Poco


#endif // Foundation_Thread_INCLUDED
